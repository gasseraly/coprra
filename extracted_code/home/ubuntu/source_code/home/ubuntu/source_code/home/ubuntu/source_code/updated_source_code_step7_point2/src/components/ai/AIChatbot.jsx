import React, { useState, useRef, useEffect } from 'react';
import { Send, MessageCircle, X, Bot, User, Loader2, Settings, Globe, Volume2, VolumeX } from 'lucide-react';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { ScrollArea } from '../ui/scroll-area';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../ui/tooltip';

const AIChatbot = ({ currentLanguage = 'ar', isOpen, onToggle, className = '' }) => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [isMuted, setIsMuted] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [chatMode, setChatMode] = useState('general'); // general, shopping, support
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  // ุงูุชุฑุฌูุงุช
  const translations = {
    ar: {
      title: 'ุงููุณุงุนุฏ ุงูุฐูู',
      placeholder: 'ุงูุชุจ ุฑุณุงูุชู ููุง...',
      send: 'ุฅุฑุณุงู',
      clear: 'ูุณุญ ุงููุญุงุฏุซุฉ',
      settings: 'ุงูุฅุนุฏุงุฏุงุช',
      mute: 'ูุชู ุงูุตูุช',
      unmute: 'ุชุดุบูู ุงูุตูุช',
      general: 'ุนุงู',
      shopping: 'ุชุณูู',
      support: 'ุฏุนู ููู',
      welcome: 'ูุฑุญุจุงู! ุฃูุง ุงููุณุงุนุฏ ุงูุฐูู ููููุน CopRRA. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ',
      thinking: 'ุฃููุฑ...',
      error: 'ุญุฏุซ ุฎุทุฃุ ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู',
      suggestions: [
        'ููู ุฃุจุญุซ ุนู ููุชุฌุ',
        'ูุง ูู ุฃูุถู ุงูุนุฑูุถุ',
        'ููู ุฃูุงุฑู ุจูู ุงูููุชุฌุงุชุ',
        'ุฃุญุชุงุฌ ูุณุงุนุฏุฉ ูู ุงูุชุณูู'
      ]
    },
    en: {
      title: 'AI Assistant',
      placeholder: 'Type your message here...',
      send: 'Send',
      clear: 'Clear Chat',
      settings: 'Settings',
      mute: 'Mute',
      unmute: 'Unmute',
      general: 'General',
      shopping: 'Shopping',
      support: 'Support',
      welcome: 'Hello! I\'m the AI assistant for CopRRA. How can I help you today?',
      thinking: 'Thinking...',
      error: 'An error occurred, please try again',
      suggestions: [
        'How do I search for a product?',
        'What are the best deals?',
        'How do I compare products?',
        'I need help with shopping'
      ]
    }
  };

  const t = translations[currentLanguage] || translations.ar;

  // ุงูุชูุฑูุฑ ุงูุชููุงุฆู ููุฃุณูู
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // ุฅุถุงูุฉ ุฑุณุงูุฉ ุชุฑุญูุจ ุนูุฏ ูุชุญ ุงููุญุงุฏุซุฉ
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setMessages([
        {
          id: 1,
          type: 'bot',
          content: t.welcome,
          timestamp: new Date(),
          suggestions: t.suggestions
        }
      ]);
    }
  }, [isOpen, currentLanguage]);

  // ุฅุฑุณุงู ุฑุณุงูุฉ
  const sendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);
    setIsTyping(true);

    try {
      // ูุญุงูุงุฉ ุงุณุชุฌุงุจุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const botResponse = await generateAIResponse(inputValue);
      
      setMessages(prev => [...prev, {
        id: Date.now() + 1,
        type: 'bot',
        content: botResponse.content,
        timestamp: new Date(),
        suggestions: botResponse.suggestions || []
      }]);

      // ุญูุธ ูู ุงูุชุงุฑูุฎ
      setChatHistory(prev => [...prev, userMessage, {
        id: Date.now() + 1,
        type: 'bot',
        content: botResponse.content,
        timestamp: new Date()
      }]);

    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => [...prev, {
        id: Date.now() + 1,
        type: 'bot',
        content: t.error,
        timestamp: new Date()
      }]);
    } finally {
      setIsLoading(false);
      setIsTyping(false);
    }
  };

  // ุชูููุฏ ุงุณุชุฌุงุจุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
  const generateAIResponse = async (userInput) => {
    try {
      const response = await fetch('/api/ai_chatbot.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userInput,
          language: currentLanguage,
          mode: chatMode,
          context: messages.slice(-5) // ุขุฎุฑ 5 ุฑุณุงุฆู ููุณูุงู
        })
      });

      if (response.ok) {
        const data = await response.json();
        return data;
      } else {
        // ุงุณุชุฌุงุจุฉ ุงูุชุฑุงุถูุฉ ูู ุญุงูุฉ ูุดู API
        return generateDefaultResponse(userInput);
      }
    } catch (error) {
      console.error('API Error:', error);
      return generateDefaultResponse(userInput);
    }
  };

  // ุงุณุชุฌุงุจุฉ ุงูุชุฑุงุถูุฉ ุฐููุฉ
  const generateDefaultResponse = (userInput) => {
    const input = userInput.toLowerCase();
    
    if (input.includes('ุจุญุซ') || input.includes('search') || input.includes('product')) {
      return {
        content: 'ููููู ุงูุจุญุซ ุนู ุงูููุชุฌุงุช ุจุงุณุชุฎุฏุงู ุดุฑูุท ุงูุจุญุซ ูู ุฃุนูู ุงูุตูุญุฉ. ูููููู ุฃูุถุงู ูุณุงุนุฏุชู ูู ุงูุนุซูุฑ ุนูู ููุชุฌุงุช ูุญุฏุฏุฉ. ูุง ุงูุฐู ุชุจุญุซ ุนููุ',
        suggestions: ['ุฃุจุญุซ ุนู ูุงุชู ุฐูู', 'ุฃุฑูุฏ ูุงุจุชูุจ', 'ุฃุญุชุงุฌ ุณูุงุนุงุช']
      };
    } else if (input.includes('ููุงุฑูุฉ') || input.includes('compare')) {
      return {
        content: 'ูููุงุฑูุฉ ุงูููุชุฌุงุชุ ููููู ุฅุถุงูุฉ ุงูููุชุฌุงุช ุฅูู ูุงุฆูุฉ ุงูููุงุฑูุฉ. ุณุฃูุถุญ ูู ููููุฉ ุงูููุงู ุจุฐูู ุฎุทูุฉ ุจุฎุทูุฉ.',
        suggestions: ['ููู ุฃุถูู ููุชุฌ ููููุงุฑูุฉุ', 'ุฃุฑูุฏ ููุงุฑูุฉ 3 ููุชุฌุงุช', 'ููู ุฃุฑู ุงููุฑููุ']
      };
    } else if (input.includes('ุณุนุฑ') || input.includes('price') || input.includes('ุนุฑุถ')) {
      return {
        content: 'ุฃุฑู ุฃูู ููุชู ุจุงูุฃุณุนุงุฑ! ูููุนูุง ูุชุชุจุน ุงูุฃุณุนุงุฑ ูู ูุฎุชูู ุงููุชุงุฌุฑ ููููุฑ ูู ุฃูุถู ุงูุนุฑูุถ. ูู ุชุฑูุฏ ุฃู ุฃุฑูู ุฃุญุฏุซ ุงูุชุฎููุถุงุชุ',
        suggestions: ['ุฃุฑูู ุงูุชุฎููุถุงุช', 'ุฃูุถู ุงูุฃุณุนุงุฑ', 'ุชุชุจุน ุงูุณุนุฑ']
      };
    } else {
      return {
        content: 'ุฃููู ุทูุจู. ูููููู ูุณุงุนุฏุชู ูู ุงูุจุญุซ ุนู ุงูููุชุฌุงุชุ ููุงุฑูุฉ ุงูุฃุณุนุงุฑุ ุงูุนุซูุฑ ุนูู ุฃูุถู ุงูุนุฑูุถุ ูุฃูุซุฑ ูู ุฐูู. ูุง ุงูุฐู ุชุญุชุงุฌู ุชุญุฏูุฏุงูุ',
        suggestions: ['ุฃุฑูุฏ ูุณุงุนุฏุฉ ูู ุงูุชุณูู', 'ููู ุฃุณุชุฎุฏู ุงููููุนุ', 'ุฃุญุชุงุฌ ุฏุนู ููู']
      };
    }
  };

  // ูุนุงูุฌุฉ ุงูุงูุชุฑุงุญุงุช
  const handleSuggestion = (suggestion) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  // ูุณุญ ุงููุญุงุฏุซุฉ
  const clearChat = () => {
    setMessages([]);
    setChatHistory([]);
  };

  // ูุนุงูุฌุฉ ููุชุงุญ Enter
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // ุชุจุฏูู ุงููุถุน
  const toggleMode = (mode) => {
    setChatMode(mode);
    setMessages([{
      id: Date.now(),
      type: 'bot',
      content: mode === 'shopping' ? 
        'ุฃููุงู ุจู ูู ูุถุน ุงูุชุณูู! ุณุฃุณุงุนุฏู ูู ุงูุนุซูุฑ ุนูู ุฃูุถู ุงูููุชุฌุงุช ูุงูุนุฑูุถ.' :
        mode === 'support' ?
        'ุฃููุงู ุจู ูู ูุถุน ุงูุฏุนู ุงูููู! ููู ูููููู ูุณุงุนุฏุชู ูู ุญู ูุดููุชูุ' :
        'ุฃููุงู ุจู ูู ุงููุถุน ุงูุนุงู! ููู ูููููู ูุณุงุนุฏุชูุ',
      timestamp: new Date()
    }]);
  };

  if (!isOpen) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              onClick={onToggle}
              className="fixed bottom-6 right-6 w-16 h-16 rounded-full bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 z-50"
              size="icon"
            >
              <MessageCircle className="w-8 h-8" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>
            <p>{t.title}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  return (
    <div className={`fixed bottom-6 right-6 w-96 h-[600px] bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col z-50 ${className}`}>
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4 rounded-t-2xl flex items-center justify-between">
        <div className="flex items-center space-x-3 rtl:space-x-reverse">
          <Bot className="w-6 h-6" />
          <div>
            <h3 className="font-semibold text-lg">{t.title}</h3>
            <Badge variant="secondary" className="bg-blue-500 text-white text-xs">
              {chatMode === 'shopping' ? '๐๏ธ' : chatMode === 'support' ? '๐ง' : '๐ฌ'} {t[chatMode]}
            </Badge>
          </div>
        </div>
        <div className="flex items-center space-x-2 rtl:space-x-reverse">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowSettings(!showSettings)}
            className="text-white hover:bg-blue-600"
          >
            <Settings className="w-4 h-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={onToggle}
            className="text-white hover:bg-blue-600"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Settings Panel */}
      {showSettings && (
        <div className="bg-gray-50 p-3 border-b">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">ูุถุน ุงููุญุงุฏุซุฉ</span>
          </div>
          <div className="flex space-x-2 rtl:space-x-reverse">
            {['general', 'shopping', 'support'].map((mode) => (
              <Button
                key={mode}
                variant={chatMode === mode ? 'default' : 'outline'}
                size="sm"
                onClick={() => toggleMode(mode)}
                className="text-xs"
              >
                {t[mode]}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Messages */}
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                  message.type === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-800'
                }`}
              >
                <p className="text-sm leading-relaxed">{message.content}</p>
                
                {/* Suggestions */}
                {message.suggestions && message.suggestions.length > 0 && (
                  <div className="mt-3 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        size="sm"
                        onClick={() => handleSuggestion(suggestion)}
                        className={`w-full text-xs ${
                          message.type === 'user' 
                            ? 'border-white text-white hover:bg-white hover:text-blue-600' 
                            : 'border-gray-300 text-gray-700 hover:bg-gray-200'
                        }`}
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                )}
                
                <span className="text-xs opacity-70 mt-2 block">
                  {message.timestamp.toLocaleTimeString('ar-SA', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </span>
              </div>
            </div>
          ))}
          
          {/* Typing Indicator */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-gray-100 rounded-2xl px-4 py-3">
                <div className="flex items-center space-x-2 rtl:space-x-reverse">
                  <Loader2 className="w-4 h-4 animate-spin text-blue-600" />
                  <span className="text-sm text-gray-600">{t.thinking}</span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
      </ScrollArea>

      {/* Input Area */}
      <div className="p-4 border-t bg-gray-50 rounded-b-2xl">
        <div className="flex space-x-2 rtl:space-x-reverse">
          <Input
            ref={inputRef}
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={t.placeholder}
            className="flex-1 border-gray-300 focus:border-blue-500 focus:ring-blue-500"
            disabled={isLoading}
          />
          <Button
            onClick={sendMessage}
            disabled={!inputValue.trim() || isLoading}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4"
          >
            {isLoading ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
          </Button>
        </div>
        
        {/* Quick Actions */}
        <div className="flex items-center justify-between mt-3">
          <Button
            variant="ghost"
            size="sm"
            onClick={clearChat}
            className="text-xs text-gray-600 hover:text-gray-800"
          >
            {t.clear}
          </Button>
          
          <div className="flex items-center space-x-2 rtl:space-x-reverse">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMuted(!isMuted)}
              className="text-xs text-gray-600 hover:text-gray-800"
            >
              {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
            </Button>
            <Badge variant="outline" className="text-xs">
              {currentLanguage === 'ar' ? 'ุงูุนุฑุจูุฉ' : 'English'}
            </Badge>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIChatbot;